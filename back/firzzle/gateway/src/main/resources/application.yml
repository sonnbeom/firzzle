# 공통 설정 (common)
server:
  port: 8080

spring:
  application:
    name: gateway-server
  cloud:
    gateway:
      routes:
        # 인증 관련 공개 경로 (필터 적용 안함)
        - id: auth-public-v1
          uri: lb://auth-server
          predicates:
            - Path=/api/v1/auth/login/**, /api/v1/auth/refresh, /api/v1/auth/kakao/callback, /api/v1/auth/public/**, /api/v1/auth/logout
          filters:
            - RewritePath=/api/v1/auth/(?<segment>.*), /api/v1/${segment}

        # 인증이 필요한 Auth API
        - id: auth-secured-v1
          uri: lb://auth-server
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - RewritePath=/api/v1/auth/(?<segment>.*), /api/v1/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        # v2 인증 서비스
        - id: auth-service-v2
          uri: lb://auth-server
          predicates:
            - Path=/api/v2/auth/**
          filters:
            - RewritePath=/api/v2/auth/(?<segment>.*), /api/v2/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        # Learning 서비스 - JWT 필터 적용
        - id: learning-service-v1
          uri: lb://learning-server
          predicates:
            - Path=/api/v1/learning/**
          filters:
            - RewritePath=/api/v1/learning/(?<segment>.*), /api/v1/${segment}
            - name: JwtAuthFilter
              args:
                enabled: false # true # 개발용으로 false 처리

        - id: learning-service-v2
          uri: lb://learning-server
          predicates:
            - Path=/api/v2/learning/**
          filters:
            - RewritePath=/api/v2/learning/(?<segment>.*), /api/v2/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        # Main 서비스 - JWT 필터 적용
        - id: main-service-v1
          uri: lb://main-server
          predicates:
            - Path=/api/v1/main/**
          filters:
            - RewritePath=/api/v1/main/(?<segment>.*), /api/v1/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        - id: main-service-v2
          uri: lb://main-server
          predicates:
            - Path=/api/v2/main/**
          filters:
            - RewritePath=/api/v2/main/(?<segment>.*), /api/v2/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        # llm 서비스 - JWT 필터 적용
        - id: llm-service-v1
          uri: lb://llm-server
          predicates:
            - Path=/api/v1/llm/**
          filters:
            - RewritePath=/api/v1/llm/(?<segment>.*), /api/v1/${segment}
            - name: JwtAuthFilter
              args:
                enabled: false

        - id: llm-service-v2
          uri: lb://llm-server
          predicates:
            - Path=/api/v2/llm/**
          filters:
            - RewritePath=/api/v2/llm/(?<segment>.*), /api/v2/${segment}
            - name: JwtAuthFilter
              args:
                enabled: true

        # Admin 서비스 - JWT 필터 적용 (추가 역할 검증 필요)
        - id: admin-service-v1
          uri: lb://admin-server
          predicates:
            - Path=/api/v1/admin/**
          filters:
            - RewritePath=/api/v1/admin/(?<segment>.*), /api/v1/${segment}
            - name: JwtAuthFilter
              args:
                enabled: false
                adminOnly: false  # Admin 역할만 접근 가능

        - id: admin-service-v2
          uri: lb://admin-server
          predicates:
            - Path=/api/v2/admin/**
          filters:
            - RewritePath=/api/v2/admin/(?<segment>.*), /api/v2/${segment}
            - name: JwtAuthFilter
              args:
                enabled: false
                adminOnly: false  # Admin 역할만 접근 가능

# JWT 설정
jwt:
  secret: your-secret-key-should-be-at-least-32-bytes-long
  access-token-validity-seconds: 3600
  refresh-token-validity-seconds: 604800
  issuer: firzzle.site

---
# 로컬 환경 설정
spring:
  config:
    activate:
      on-profile: local
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "ENC(4oSfuwc+2mk3Mkj5schdfE5ZpoY7x57OWCdk9qOOFGFwqgwpL4tCciVnOMotgokh)"
              - "ENC(d3W0CSvqFFRIzhWTQAyFeaU/+abWyRcUJGwuwzJbvL4DSxprFWKLsC6zQO8Rqjc9)"
              - "ENC(Xfl3MDQKHLlZc//V9ypP/nYRO9U1MLq5e8LYoOwxz3DLgHZsT2CrCnGqlZHoYIFF)"
              - "ENC(T6+waASraE7AHZaf2daM1V4oEpStJAhLWnNhT7HBvvENbwTYkrPcG9/Mg7mOFxJP)"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
#      defaultZone: ENC(gwXQw1ns6DV2Br4OkeUbr1f0vBn5FAaf7HWlRFogDejLcTUM7At5Y51uIo+GDsogipX5eIWEHgRmYEFcjyPYYg==)

# 애플리케이션 설정
app:
  url:
    base: ENC(d3W0CSvqFFRIzhWTQAyFeaU/+abWyRcUJGwuwzJbvL4DSxprFWKLsC6zQO8Rqjc9)

---
# 개발 환경 설정
spring:
  config:
    activate:
      on-profile: dev
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "ENC(Sk5QIMzl37FUMqw26umoe1S/VB5h0RI+v4+QKw06PTruXIYe7i8QnQ2dvMvY9VhC)"
              - "ENC(4oSfuwc+2mk3Mkj5schdfE5ZpoY7x57OWCdk9qOOFGFwqgwpL4tCciVnOMotgokh)" # 개발 끝나면 삭제
              - "ENC(d3W0CSvqFFRIzhWTQAyFeaU/+abWyRcUJGwuwzJbvL4DSxprFWKLsC6zQO8Rqjc9)" # 개발 끝나면 삭제
              - "ENC(Xfl3MDQKHLlZc//V9ypP/nYRO9U1MLq5e8LYoOwxz3DLgHZsT2CrCnGqlZHoYIFF)" # 개발 끝나면 삭제
              - "ENC(T6+waASraE7AHZaf2daM1V4oEpStJAhLWnNhT7HBvvENbwTYkrPcG9/Mg7mOFxJP)" # 개발 끝나면 삭제
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ENC(gwXQw1ns6DV2Br4OkeUbr1f0vBn5FAaf7HWlRFogDejLcTUM7At5Y51uIo+GDsogipX5eIWEHgRmYEFcjyPYYg==)

#Jasypt 설정
jasypt:
  encryptor:
    bean: jasyptStringEncryptor
  secret-key: ${JASYPT_SECRET_KEY}

app:
  url:
    base: ENC(Sk5QIMzl37FUMqw26umoe1S/VB5h0RI+v4+QKw06PTruXIYe7i8QnQ2dvMvY9VhC)

---
# 프로덕션 환경 설정
spring:
  config:
    activate:
      on-profile: production
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "ENC(Sk5QIMzl37FUMqw26umoe1S/VB5h0RI+v4+QKw06PTruXIYe7i8QnQ2dvMvY9VhC)"
              - "ENC(4oSfuwc+2mk3Mkj5schdfE5ZpoY7x57OWCdk9qOOFGFwqgwpL4tCciVnOMotgokh)" # 개발 끝나면 삭제
              - "ENC(d3W0CSvqFFRIzhWTQAyFeaU/+abWyRcUJGwuwzJbvL4DSxprFWKLsC6zQO8Rqjc9)" # 개발 끝나면 삭제
              - "ENC(Xfl3MDQKHLlZc//V9ypP/nYRO9U1MLq5e8LYoOwxz3DLgHZsT2CrCnGqlZHoYIFF)" # 개발 끝나면 삭제
              - "ENC(T6+waASraE7AHZaf2daM1V4oEpStJAhLWnNhT7HBvvENbwTYkrPcG9/Mg7mOFxJP)" # 개발 끝나면 삭제
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ENC(gwXQw1ns6DV2Br4OkeUbr1f0vBn5FAaf7HWlRFogDejLcTUM7At5Y51uIo+GDsogipX5eIWEHgRmYEFcjyPYYg==)

app:
  url:
    base: ENC(Sk5QIMzl37FUMqw26umoe1S/VB5h0RI+v4+QKw06PTruXIYe7i8QnQ2dvMvY9VhC)