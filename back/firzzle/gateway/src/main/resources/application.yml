# 공통 설정 (common)

# 서버 (HTTP 헤더 전달 전략, UTF-8)
server:
  port: 8080
  forward-headers-strategy: native
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  application:
    name: gateway-server
  cloud:
    gateway:
      routes:
        # 인증 관련 공개 경로 (필터 적용 안함)
        - id: auth-public-v1
          uri: lb://auth-server
          predicates:
            - Path=/api/v1/auth/login/**, /api/v1/auth/refresh, /api/v1/auth/kakao/callback, /api/v1/auth/public/**, /api/v1/auth/logout, /api/v1/auth/admin/login
          filters:
            - RewritePath=/api/v1/auth/(?<segment>.*), /api/v1/${segment}

        # 인증이 필요한 Auth API
        - id: auth-secured-v1
          uri: lb://auth-server
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v1/auth/(?<segment>.*), /api/v1/${segment}

        # v2 인증 서비스
        - id: auth-service-v2
          uri: lb://auth-server
          predicates:
            - Path=/api/v2/auth/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v2/auth/(?<segment>.*), /api/v2/${segment}

        # Learning 서비스 - JWT 필터 적용
        - id: learning-service-v1
          uri: lb://learning-server
          predicates:
            - Path=/api/v1/learning/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true # true # 개발용으로 false 처리
            - RewritePath=/api/v1/learning/(?<segment>.*), /api/v1/${segment}

        - id: learning-service-v2
          uri: lb://learning-server
          predicates:
            - Path=/api/v2/learning/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v2/learning/(?<segment>.*), /api/v2/${segment}

        # Main 서비스 - JWT 필터 적용
        - id: main-service-v1
          uri: lb://main-server
          predicates:
            - Path=/api/v1/main/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v1/main/(?<segment>.*), /api/v1/${segment}

        - id: main-service-v2
          uri: lb://main-server
          predicates:
            - Path=/api/v2/main/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v2/main/(?<segment>.*), /api/v2/${segment}

        # llm 서비스 - JWT 필터 적용
        - id: llm-service-v1
          uri: lb://llm-server
          predicates:
            - Path=/api/v1/llm/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v1/llm/(?<segment>.*), /api/v1/${segment}

        - id: llm-service-v2
          uri: lb://llm-server
          predicates:
            - Path=/api/v2/llm/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: true
            - RewritePath=/api/v2/llm/(?<segment>.*), /api/v2/${segment}

        # Admin 서비스 - JWT 필터 적용 (추가 역할 검증 필요)
        - id: admin-service-v1
          uri: lb://admin-server
          predicates:
            - Path=/api/v1/admin/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: false
                adminOnly: false  # Admin 역할만 접근 가능
            - RewritePath=/api/v1/admin/(?<segment>.*), /api/v1/${segment}

        - id: admin-service-v2
          uri: lb://admin-server
          predicates:
            - Path=/api/v2/admin/**
          filters:
            - name: JwtAuthFilter
              args:
                enabled: false
                adminOnly: false  # Admin 역할만 접근 가능
            - RewritePath=/api/v2/admin/(?<segment>.*), /api/v2/${segment}

# JWT 설정
jwt:
  secret: your-secret-key-should-be-at-least-32-bytes-long
  access-token-validity-seconds: 3600
  refresh-token-validity-seconds: 604800
  issuer: firzzle.site

---
# 로컬 환경 설정
spring:
  config:
    activate:
      on-profile: local
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "http://localhost:3000"
              - "http://localhost:5173"
              - "http://localhost:5174"
              - "http://localhost:8080"
              - "https://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
#      defaultZone: ENC(spKgsrOQzjPYIfzNCX3o9c+mzyWel4+5R1g8oUDOHSzeruJ0KI6i1yueMvxoYYomaFswLccx4QM596V7LROVHg==)

# 애플리케이션 설정
app:
  url:
    base: ENC(FCZgI6VuDw9xSrWyDvoOwO8TdZJF3lknVW9zg0KCMqImZAPg7wW74XeXm2gxoUbL)

---
# 개발 환경 설정
spring:
  config:
    activate:
      on-profile: dev
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "ENC(FCZgI6VuDw9xSrWyDvoOwO8TdZJF3lknVW9zg0KCMqImZAPg7wW74XeXm2gxoUbL)"
              - "http://localhost:3000" # 개발 끝나면 삭제
              - "http://localhost:5173" # 개발 끝나면 삭제
              - "http://localhost:5174" # 개발 끝나면 삭제
              - "http://localhost:8080" # 개발 끝나면 삭제
              - "https://localhost:3000" # 개발 끝나면 삭제
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ENC(spKgsrOQzjPYIfzNCX3o9c+mzyWel4+5R1g8oUDOHSzeruJ0KI6i1yueMvxoYYomaFswLccx4QM596V7LROVHg==)

#Jasypt 설정
jasypt:
  encryptor:
    bean: jasyptStringEncryptor
  secret-key: ${JASYPT_SECRET_KEY}

app:
  url:
    base: ENC(FCZgI6VuDw9xSrWyDvoOwO8TdZJF3lknVW9zg0KCMqImZAPg7wW74XeXm2gxoUbL)

---
# 프로덕션 환경 설정
spring:
  config:
    activate:
      on-profile: production
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            # allowedOrigins 대신 allowedOriginPatterns 사용
            allowedOriginPatterns:
              - "ENC(FCZgI6VuDw9xSrWyDvoOwO8TdZJF3lknVW9zg0KCMqImZAPg7wW74XeXm2gxoUbL)"
              - "http://localhost:3000" # 개발 끝나면 삭제
              - "http://localhost:5173" # 개발 끝나면 삭제
              - "http://localhost:5174" # 개발 끝나면 삭제
              - "http://localhost:8080" # 개발 끝나면 삭제
              - "https://localhost:3000" # 개발 끝나면 삭제
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            exposedHeaders:
              - "Authorization"
              - "Access-Control-Allow-Origin"
              - "Access-Control-Allow-Credentials"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ENC(spKgsrOQzjPYIfzNCX3o9c+mzyWel4+5R1g8oUDOHSzeruJ0KI6i1yueMvxoYYomaFswLccx4QM596V7LROVHg==)

app:
  url:
    base: ENC(FCZgI6VuDw9xSrWyDvoOwO8TdZJF3lknVW9zg0KCMqImZAPg7wW74XeXm2gxoUbL)