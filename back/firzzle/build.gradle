plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.firzzle'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 중앙 집중식 버전 관리 - 모든 서브 프로젝트에서 사용
ext {
	springCloudVersion = '2024.0.0'
	resilience4jVersion = '2.0.0'
	jjwtVersion = '0.12.6'
	springSecurityVersion = '6.1.5'
	jacksonVersion = '2.14.0'
	nettyVersion = '4.1.100.Final'
	logbackVersion = '1.2.13'
}

repositories {
	mavenCentral()
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
			exclude group: "org.slf4j", module: "slf4j-simple"
		}
	}

	// 각 서브프로젝트에서 공통 의존성 관리
	dependencyManagement {
		imports {
			// Spring 관련 BOM
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"

			// 라이브러리 BOM
			mavenBom "io.github.resilience4j:resilience4j-bom:${resilience4jVersion}"
			mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonVersion}"
			mavenBom "io.netty:netty-bom:${nettyVersion}"
		}
	}

	dependencies {
		// Spring Boot 기본
		implementation 'org.springframework.boot:spring-boot-starter'

		// lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// 테스트
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'

		// 로깅
		implementation 'ch.qos.logback:logback-classic'
		implementation 'ch.qos.logback:logback-core'
	}

	tasks.withType(JavaCompile).configureEach {
		options.annotationProcessorPath = configurations.annotationProcessor
		options.compilerArgs << '-parameters'
		options.encoding = 'UTF-8'  // 소스 파일 인코딩을 UTF-8로 강제
	}

	// 테스트 설정
	test {
		useJUnitPlatform()
	}

	// 기본 jar/bootJar 설정
	bootJar {
		enabled = false  // 명시적으로 활성화하지 않은 모듈은 bootJar 생성 안함
	}

	jar {
		enabled = true  // 기본적으로 jar 생성 허용
	}
}

// 루트 프로젝트 jar 비활성화 (서브 모듈에서만 필요)
bootJar {
	enabled = false
}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}

// 컴파일러 옵션 설정 - 루트 프로젝트에도 적용
tasks.withType(JavaCompile) {
	options.compilerArgs << '-parameters'
	options.encoding = 'UTF-8'
}